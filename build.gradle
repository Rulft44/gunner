//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
plugins {
	id "maven-publish"
	alias libs.plugins.loom
	alias libs.plugins.minotaur
}

version = "$modVersion+$branchName"
archivesBaseName = project.slug

repositories {
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }

	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
	}

	exclusiveContent {
		forRepository {
			maven {
				name = 'GeckoLib'
				url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
			}
		}
		filter {
			includeGroup('software.bernie.geckolib')
		}
	}

	maven { url "https://maven.architectury.dev/" }

	maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
	minecraft libs.mc
	mappings variantOf(libs.yarn) { classifier "v2" }

	modImplementation libs.fl
	modImplementation libs.fapi

	// Confetti Lib
	modImplementation "maven.modrinth:confetti-lib:${confettiVersion}+${compatibleVersions}"

	// GeckoLib
	modImplementation "software.bernie.geckolib:geckolib-fabric-${compatibleVersions}:${geckolibVersion}"

	// Cloth Config
	modApi("me.shedaniel.cloth:cloth-config-fabric:${clothConfigVersion}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Mod Menu
	modApi "com.terraformersmc:modmenu:${modMenuVersion}"


}

processResources {
	final Map<String, String> meta = [
		version       : modVersion,
		modId         : modId,
		modName       : modName,
		modDescription: modDescription,
		homepage      : "https://modrinth.com/mod/${slug}",
		issues        : "https://github.com/${user}/${slug}/issues",
		sources       : "https://github.com/${user}/${slug}",
		license       : license,
		authors       : authors.split(", ").join("\",\n    \""),
		members       : "${authors}",
		mc            : compatibleVersions.split(", ")[0],
		fl            : libs.versions.fl.get(),
		fapi          : libs.versions.fapi.get(),
	]
	inputs.properties meta
	filesMatching("*.mod.json") { expand(meta) }
	filesMatching("META-INF/*mods.toml") { expand(meta) }
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 21
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}


publishing {
	repositories {
	}
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}

modrinth {
	token = "$System.env.MODRINTH_TOKEN"
	projectId = slug
	versionNumber = project.version
	uploadFile = remapJar
	gameVersions = compatibleVersions.split(", ").toList()
	loaders = compatibleLoaders.split(", ").toList()
	changelog = "$System.env.CHANGELOG"
	syncBodyFrom = "<!--DO NOT EDIT MANUALLY: synced from gh readme-->\n" + rootProject.file("README.md").text
	dependencies {
		required.version "fabric-api", libs.versions.fapi.get()

		required.project "geckolib"

		required.project "cloth-config"
	}
}

fabricApi {
	configureDataGeneration()
}
